set(CMAKE_SYSTEM_NAME Generic)
set(CMAKE_SYSTEM_PROCESSOR ARM)

if(MINGW OR CYGWIN OR WIN32)
    set(UTIL_SEARCH_CMD where)
elseif(UNIX OR APPLE)
    set(UTIL_SEARCH_CMD which)
endif()

IF(NOT TARGET_TRIPLET)
    SET(TARGET_TRIPLET "arm-none-eabi")
    MESSAGE(STATUS "No TARGET_TRIPLET specified, using default: " ${TARGET_TRIPLET})
ENDIF()

IF (WIN32)
    SET(TOOL_EXECUTABLE_SUFFIX ".exe")
ELSE()
    SET(TOOL_EXECUTABLE_SUFFIX "")
ENDIF()

execute_process(
  COMMAND ${UTIL_SEARCH_CMD} ${TARGET_TRIPLET}-gcc
  OUTPUT_VARIABLE BINUTILS_PATH
  OUTPUT_STRIP_TRAILING_WHITESPACE
)

get_filename_component(ARM_TOOLCHAIN_DIR ${BINUTILS_PATH} DIRECTORY)
# Without that flag CMake is not able to pass test compilation check
set(CMAKE_TRY_COMPILE_TARGET_TYPE STATIC_LIBRARY)

set(CMAKE_C_COMPILER   ${TARGET_TRIPLET}-gcc${TOOL_EXECUTABLE_SUFFIX})
set(CMAKE_CXX_COMPILER ${TARGET_TRIPLET}-g++${TOOL_EXECUTABLE_SUFFIX})
set(CMAKE_ASM_COMPILER ${CMAKE_C_COMPILER})
set(CMAKE_AR           ${TARGET_TRIPLET}-gcc-ar${TOOL_EXECUTABLE_SUFFIX})
set(CMAKE_RANLIB       ${TARGET_TRIPLET}-gcc-ranlib${TOOL_EXECUTABLE_SUFFIX})

SET(CMAKE_OBJDUMP      ${ARM_TOOLCHAIN_DIR}/${TARGET_TRIPLET}-objdump${TOOL_EXECUTABLE_SUFFIX} CACHE INTERNAL "objdump tool")
SET(CMAKE_CPPFILT      ${ARM_TOOLCHAIN_DIR}/${TARGET_TRIPLET}-c++filt${TOOL_EXECUTABLE_SUFFIX} CACHE INTERNAL "C++filt")
set(CMAKE_OBJCOPY      ${ARM_TOOLCHAIN_DIR}/${TARGET_TRIPLET}-objcopy${TOOL_EXECUTABLE_SUFFIX} CACHE INTERNAL "objcopy tool")
set(CMAKE_SIZE_UTIL    ${ARM_TOOLCHAIN_DIR}/${TARGET_TRIPLET}-size${TOOL_EXECUTABLE_SUFFIX}    CACHE INTERNAL "size tool")

set(CMAKE_FIND_ROOT_PATH ${ARM_TOOLCHAIN_DIR} ${ARM_TOOLCHAIN_DIR}/.. ${EXTRA_FIND_PATH})
set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)


SET(CMAKE_C_FLAGS_DEBUG               "-Og -g" CACHE INTERNAL "c compiler flags debug")
SET(CMAKE_CXX_FLAGS_DEBUG             "-Og -g" CACHE INTERNAL "cxx compiler flags debug")
SET(CMAKE_ASM_FLAGS_DEBUG             "-g" CACHE INTERNAL "asm compiler flags debug")
SET(CMAKE_EXE_LINKER_FLAGS_DEBUG      "" CACHE INTERNAL "linker flags debug")

SET(CMAKE_C_FLAGS_RELEASE             "-O3 -DNDEBUG" CACHE INTERNAL "c compiler flags release")
SET(CMAKE_CXX_FLAGS_RELEASE           "-O3 -DNDEBUG" CACHE INTERNAL "cxx compiler flags release")
SET(CMAKE_ASM_FLAGS_RELEASE           "" CACHE INTERNAL "asm compiler flags release")
SET(CMAKE_EXE_LINKER_FLAGS_RELEASE    "" CACHE INTERNAL "linker flags release")

SET(CMAKE_C_FLAGS_MINSIZEREL          "-Os -DNDEBUG" CACHE INTERNAL "c compiler flags release")
SET(CMAKE_CXX_FLAGS_MINSIZEREL        "-Os -DNDEBUG" CACHE INTERNAL "cxx compiler flags release")
SET(CMAKE_ASM_FLAGS_MINSIZEREL        "" CACHE INTERNAL "asm compiler flags release")
SET(CMAKE_EXE_LINKER_FLAGS_MINSIZEREL "" CACHE INTERNAL "linker flags release")

SET(CMAKE_C_FLAGS_RELWITHDEBINFO           "-O2 -g -DNDEBUG" CACHE INTERNAL "c compiler flags release")
SET(CMAKE_CXX_FLAGS_RELWITHDEBINFO         "-O2 -g -DNDEBUG" CACHE INTERNAL "cxx compiler flags release")
SET(CMAKE_ASM_FLAGS_RELWITHDEBINFO         "-g" CACHE INTERNAL "asm compiler flags release")
SET(CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO  "" CACHE INTERNAL "linker flags release")




